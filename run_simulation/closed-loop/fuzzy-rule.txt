FUNCTION_BLOCK vmigsim

VAR_INPUT
	status : REAL;
	delta_status : REAL;
END_VAR

VAR_OUTPUT
	delta_n_multiplier : REAL;
END_VAR

FUZZIFY status
	TERM very_intime := sigm 0.4 50;
	TERM intime := gbell 15 5 30;
	TERM ontime := gbell 5 3 0;
	TERM late := gbell 15 5 -30;
	TERM very_late := sigm -0.4 -50;
END_FUZZIFY

FUZZIFY delta_status
	TERM better := sigm 0.4 15;
	TERM neutral := gbell 10 3 0;
	TERM worse := sigm -0.4 -15;
END_FUZZIFY

DEFUZZIFY delta_n_multiplier
	TERM follow_most := (0.5, 0) (1, 1);
	TERM follow := trian 0.1 0.3 0.5;
	TERM unchanged := trian -0.1 0 0.1;
	TERM reverse := trian -0.5 -0.3 -0.1;
	TERM reverse_most := (-1, 1) (-0.5, 0);
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK thread_adapt
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method
	
	RULE 1 : IF status IS very_late AND delta_status IS worse THEN delta_n_multiplier IS reverse_most ;
	RULE 2 : IF status IS very_late AND delta_status IS better THEN delta_n_multiplier IS follow_most ;
	RULE 3 : IF status IS late AND delta_status IS worse THEN delta_n_multiplier IS reverse ;
	RULE 4 : IF status IS late AND delta_status IS better THEN delta_n_multiplier IS follow ;
	RULE 5 : IF status IS intime AND delta_status IS worse THEN delta_n_multiplier IS reverse ;
	RULE 6 : IF status IS intime AND delta_status IS better THEN delta_n_multiplier IS follow ;
	RULE 7 : IF status IS very_intime AND delta_status IS worse THEN delta_n_multiplier IS reverse_most ;
	RULE 8 : IF status IS very_intime AND delta_status IS better THEN delta_n_multiplier IS unchanged ;
END_RULEBLOCK

END_FUNCTION_BLOCK

